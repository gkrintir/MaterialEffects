// -*- C++ -*-
//
// Package:    Analyzer/DemoAnalyzer_old
// Class:      DemoAnalyzer_old
// 
/**\class DemoAnalyzer_old DemoAnalyzer_old.cc Analyzer/DemoAnalyzer_old/plugins/DemoAnalyzer_old.cc

 Description: [one line class summary]

 Implementation:
     [Notes on implementation]
*/
//
// Original Author:  Georgios Krintiras
//         Created:  Fri, 13 Mar 2015 11:02:38 GMT
//
//


// system include files
#include <memory>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"
#include "FWCore/Framework/interface/ESHandle.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"
#include "FWCore/MessageLogger/interface/MessageLogger.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"

#include "DataFormats/TrackReco/interface/Track.h"
#include "DataFormats/TrackReco/interface/TrackFwd.h"
#include "DataFormats/TrackerCommon/interface/TrackerTopology.h"
#include "DataFormats/HepMCCandidate/interface/GenParticle.h"
#include "SimDataFormats/TrackingHit/interface/PSimHit.h"
#include "SimDataFormats/TrackingHit/interface/PSimHitContainer.h"
#include "SimDataFormats/Track/interface/SimTrack.h"
#include "SimDataFormats/Track/interface/SimTrackContainer.h"

#include "DataFormats/Math/interface/Vector3D.h"
#include "Geometry/Records/interface/IdealGeometryRecord.h"
#include "Geometry/Records/interface/TrackerDigiGeometryRecord.h"
#include "Geometry/TrackerGeometryBuilder/interface/TrackerGeometry.h"

#include "CommonTools/UtilAlgos/interface/TFileService.h"

#include "TH2.h"
#include "TMath.h"
#include "TString.h"
#include "math.h"
//
// class declaration
//

class DemoAnalyzer_old : public edm::EDAnalyzer {
   public:
      explicit DemoAnalyzer_old(const edm::ParameterSet&);
      ~DemoAnalyzer_old();

      static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);


   private:
      virtual void beginJob() override;
      virtual void analyze(const edm::Event&, const edm::EventSetup&) override;
      virtual void endJob() override;

      //virtual void beginRun(edm::Run const&, edm::EventSetup const&) override;
      //virtual void endRun(edm::Run const&, edm::EventSetup const&) override;
      //virtual void beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) override;
      //virtual void endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) override;
      // ----------member data ---------------------------
      edm::InputTag simHitsTag_;

      edm::InputTag simHitsTag_PXB_Lowtof_;
      edm::InputTag simHitsTag_PXB_Hightof_;
      edm::InputTag simHitsTag_PXF_Lowtof_;
      edm::InputTag simHitsTag_PXF_Hightof_;
      edm::InputTag simHitsTag_TEC_Lowtof_;
      edm::InputTag simHitsTag_TEC_Hightof_;
      edm::InputTag simHitsTag_TIB_Lowtof_;
      edm::InputTag simHitsTag_TIB_Hightof_;
      edm::InputTag simHitsTag_TID_Lowtof_;
      edm::InputTag simHitsTag_TID_Hightof_;
      edm::InputTag simHitsTag_TOB_Lowtof_;
      edm::InputTag simHitsTag_TOB_Hightof_;


      edm::Service<TFileService> fs_;
      //Funtions
      void bookHistos();
      void bookEnergyLosses1D( std::vector<TH1F*>&, int nBins, float range, const TString &det, unsigned int nHistos );
      void bookEnergyLosses2D( std::vector<TH2F*>&, 
			       int nBinsX, float rangeX,  int nBinsY, float rangeY, 
			       const TString &var, const TString &det, unsigned int nHistos );

      // Histograms      
      //Generator Level
      TH1F* h_Genpart_Mother_Pt_;
      TH1F* h_Genpart_Daughter_Pt_;
      
      //  Simulation Level 
      ////SimTrack Class
      TH1F* h_Track_P_;
      TH1F* h_Track_Pt_;
      TH1F* h_Track_Phi_;
      TH1F* h_Track_Eta_;
      TH2F* h_Track_ID_Track_Pt_;
      ////PSimHit Class
      TH1F* h_Hit_Pixels_Pt_Entry_;
      TH1F* h_Hit_Strips_Pt_Entry_;
      TH1I* h_Hit_PXBPXF_PerLayer_Multiplicity_;
      TH1I* h_Hit_PixelDets_Multiplicity_;
      TH1I* h_Hit_StripDets_Multiplicity_;
      TH2F* h_Hit_PixelDets_Map_;
      TH2F* h_Hit_StripDets_Map_;
      ////PSimHit against SimTrack Class
      TH2F* h_Hit_Track_Map_Size_;
      TH2F* h_Hit_Track_Map_ID_;
      TH2F* h_Hit_Loss_Track_Pt_;
      TH2F* h_Hit_Loss_Track_Pt_Protons_;
      TH2F* h_Hit_Loss_Track_Pt_Pions_;
      TH2F* h_Hit_Loss_Track_Pt_Kaons_;

      //  Detectors
      ////Pixel Barrel - 3 different detectors
      static const unsigned int nHistos_PXB_ = 3;
      std::vector<TH1F*> histos_PXB_dedx_;
      std::vector<TH2F*> histos_PDG_PXB_dedx_;
      std::vector<TH2F*> histos_PDG_PXB_dx_;
      std::vector<TH2F*> histos_pT_PXB_dedx_;
      ////Pixel Endcap - 2 different detectors
      static const unsigned int nHistos_PXF_ = 2;
      std::vector<TH1F*> histos_PXF_dedx_;
      std::vector<TH2F*> histos_PDG_PXF_dedx_;
      std::vector<TH2F*> histos_PDG_PXF_dx_;
      ////TIB - 4 different detectors
      static const unsigned int nHistos_TIB_ = 4;
      std::vector<TH1F*> histos_TIB_dedx_;
      std::vector<TH2F*> histos_PDG_TIB_dedx_;
      std::vector<TH2F*> histos_PDG_TIB_dx_;
      ////TOB - 6 different detectors
      static const unsigned int nHistos_TOB_ = 6;
      std::vector<TH1F*> histos_TOB_dedx_;
      std::vector<TH2F*> histos_PDG_TOB_dedx_;
      std::vector<TH2F*> histos_PDG_TOB_dx_;
      ////TID - 3 different detectors
      static const unsigned int nHistos_TID_ = 3;
      std::vector<TH1F*> histos_TID_dedx_;
      std::vector<TH2F*> histos_PDG_TID_dedx_;
      std::vector<TH2F*> histos_PDG_TID_dx_;
      ////TEC - 9 different detectors
      static const unsigned int nHistos_TEC_ = 9;
      std::vector<TH1F*> histos_TEC_dedx_;
      std::vector<TH2F*> histos_PDG_TEC_dedx_;
      std::vector<TH2F*> histos_PDG_TEC_dx_;
      
      // PSimHits
      std::vector<edm::InputTag> trackerContainers_;
      //
  
  /*
  unsigned int nAlphaBarrel, nBetaBarrel, nAlphaForward, nBetaForward;
  // resolution bins
  double resAlphaBarrel_binMin , resAlphaBarrel_binWidth;
  unsigned int resAlphaBarrel_binN;
  double resBetaBarrel_binMin  , resBetaBarrel_binWidth;
  unsigned int resBetaBarrel_binN;
  double resAlphaForward_binMin , resAlphaForward_binWidth;
  unsigned int resAlphaForward_binN;
  double resBetaForward_binMin  , resBetaForward_binWidth;
  unsigned int resBetaForward_binN;
  //
  // ROOT files with nominal distributions
  std::string thePixelMultiplicityFileName;
  std::string thePixelBarrelResolutionFileName;
  std::string thePixelForwardResolutionFileName;
  TFile* thePixelMultiplicityFile;
  TFile* thePixelBarrelResolutionFile;
  TFile* thePixelForwardResolutionFile;
  //
  // internal vector: bins ; external vector: multiplicity
  std::vector<TH1F*> histos_PXB_alpha;
  std::vector<TH1F*> histos_PXB_beta;
  std::vector<TH1F*> histos_PXF_alpha;
  std::vector<TH1F*> histos_PXF_beta;
  std::vector<TH1F*> histos_PXB_nom_alpha;
  std::vector<TH1F*> histos_PXB_nom_beta;
  std::vector<TH1F*> histos_PXF_nom_alpha;
  std::vector<TH1F*> histos_PXF_nom_beta;
   // energy losses
  std::vector<TH1F*> histos_PXB_dedx_alpha;
  std::vector<TH1F*> histos_PXB_dedx_beta;
  std::vector<TH1F*> histos_PXF_dedx_alpha;
  std::vector<TH1F*> histos_PXF_dedx_beta;
  // resolutions
  std::vector<TH1F*> histos_PXB_res_alpha;
  std::vector<TH1F*> histos_PXB_res_beta;
  std::vector<TH1F*> histos_PXF_res_alpha;
  std::vector<TH1F*> histos_PXF_res_beta;
  std::vector<TH1F*> histos_PXB_nom_res_alpha;
  std::vector<TH1F*> histos_PXB_nom_res_beta;
  std::vector<TH1F*> histos_PXF_nom_res_alpha;
  std::vector<TH1F*> histos_PXF_nom_res_beta;
  //*/  
};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//
// constructors and destructor
//
DemoAnalyzer_old::DemoAnalyzer_old(const edm::ParameterSet& iConfig):


  simHitsTag_("famosSimHits", "TrackerHits"),
  
  simHitsTag_PXB_Lowtof_("g4SimHits", "TrackerHitsPixelBarrelLowTof"),
  simHitsTag_PXB_Hightof_("g4SimHits", "TrackerHitsPixelBarrelHighTof"),
  simHitsTag_PXF_Lowtof_("g4SimHits", "TrackerHitsPixelEndcapLowTof"), 
  simHitsTag_PXF_Hightof_("g4SimHits", "TrackerHitsPixelEndcapHighTof"),
  simHitsTag_TEC_Lowtof_("g4SimHits", "TrackerHitsTECLowTof"), 
  simHitsTag_TEC_Hightof_("g4SimHits", "TrackerHitsTECHighTof"),
  simHitsTag_TIB_Lowtof_("g4SimHits", "TrackerHitsTIBLowTof"), 
  simHitsTag_TIB_Hightof_("g4SimHits", "TrackerHitsTIBHighTof"),
  simHitsTag_TID_Lowtof_("g4SimHits", "TrackerHitsTIDLowTof"), 
  simHitsTag_TID_Hightof_("g4SimHits", "TrackerHitsTIDHighTof"),
  simHitsTag_TOB_Lowtof_("g4SimHits", "TrackerHitsTOBLowTof"), 
  simHitsTag_TOB_Hightof_("g4SimHits", "TrackerHitsTOBHighTof"),
  
  fs_()

{
  //now do what ever initialization is needed
  using namespace edm;

  //Generator Level
  h_Genpart_Mother_Pt_ = fs_->make<TH1F>("Genpart_Mother_Pt", "Genpart_Mother_Track_Pt", 200, 0., 12.); //ok
  h_Genpart_Daughter_Pt_ = fs_->make<TH1F>("Genpart_Daughter_Pt", "Genpart_Daughter_Pt", 200, 0., 12.); //ok
  
  //Simulation Level 
  ////SimTrack Class
  h_Track_P_ = fs_->make<TH1F>("SimTrack_P", "SimTrack_P", 200, 0., 100.); //ok
  h_Track_Pt_ = fs_->make<TH1F>("SimTrack_Pt", "SimTrack_Pt", 200, 0., 100.); //ok
  h_Track_Phi_ = fs_->make<TH1F>("SimTrack_Phi", "SimTrack_Phi", 200, -TMath::Pi(), TMath::Pi()); //ok
  h_Track_Eta_ = fs_->make<TH1F>("SimTrack_Eta", "SimTrack_Eta", 200, -2.5, 2.5); //ok
  h_Track_ID_Track_Pt_ = fs_->make<TH2F>("Track_ID_Track_Pt", "Track_ID_Track_Pt",
					 2400, 0., 100., 2*2212, 0., 2213.); //ok

  ////PSimHit Class
  h_Hit_Pixels_Pt_Entry_ = fs_->make<TH1F>("PSimHit_Pixels_P_AtEntry", "PSimHit_Pixels_P_AtEntry", 200, 0., 100.); //ok
  h_Hit_Strips_Pt_Entry_ = fs_->make<TH1F>("PSimHit_Strips_P_AtEntry", "PSimHit_Strips_P_AtEntry", 200, 0., 100.); //ok

  h_Hit_PXBPXF_PerLayer_Multiplicity_ = fs_->make<TH1I>("PSimHit_Multiplicity_PXBPXF", "PSimHit_Multiplicity_PXBPXF", 5, 1, 6); //ok
  h_Hit_PixelDets_Multiplicity_ = fs_->make<TH1I>("PSimHit_AllPixelLayers", "PSimHit_AllPixelLayers", 29, 1, 30); //ok
  h_Hit_StripDets_Multiplicity_ = fs_->make<TH1I>("PSimHit_AllStripLayers", "PSimHit_AllStripLayers", 29, 1, 30); //ok

  h_Hit_PixelDets_Map_ = fs_->make<TH2F>("PSimHit_AllPixelLayers_Map", "Hit_AllPixelLayers_Map",
					 240, -300., 300., 240, -140., 140.); //ok
  h_Hit_StripDets_Map_ = fs_->make<TH2F>("PSimHit_AllStripLayers", "Hit_AllStripLayers_Map",
					 240, -300., 300., 240, -140., 140.); //ok

  ////PSimHit against SimTrack Class
  h_Hit_Track_Map_Size_  = fs_->make<TH2F>("Hit_Track_Map_Size", "Hit_Track_Map_Size",
					   200, 0., 200., 100, 0., 100.); //ok?
  h_Hit_Track_Map_ID_    = fs_->make<TH2F>("Hit_Track_Map_ID", "Hit_Track_Map_ID",
					   300, 0., 300., 100, 0., 100.); //ok?
 
  h_Hit_Loss_Track_Pt_   = fs_->make<TH2F>("Hit_Track_pT", "Hit_dedx_",
					   240, 0., 100., 240, 0., .01); //ok?

  h_Hit_Loss_Track_Pt_Protons_   = fs_->make<TH2F>("Hit_Track_pT_protons", "Hit_dedx_protons",
						   640, 0., 100., 240, 0., .01); //ok?
  
  h_Hit_Loss_Track_Pt_Pions_   = fs_->make<TH2F>("Hit_Track_pT_pions", "Hit_dedx_pions",
						 640, 0., 100., 240, 0., .01); //ok?
  
  h_Hit_Loss_Track_Pt_Kaons_   = fs_->make<TH2F>("Hit_Track_pT_kaons", "Hit_dedx_kaons",
						 640, 0., 100., 240, 0., .01); //ok?





  trackerContainers_.push_back(simHitsTag_);
    
  /*
  trackerContainers_.push_back(simHitsTag_PXB_Lowtof_);
  trackerContainers_.push_back(simHitsTag_PXB_Hightof_);
  trackerContainers_.push_back(simHitsTag_PXF_Lowtof_);
  trackerContainers_.push_back(simHitsTag_PXF_Hightof_);
  trackerContainers_.push_back(simHitsTag_TEC_Lowtof_);
  trackerContainers_.push_back(simHitsTag_TEC_Hightof_);
  trackerContainers_.push_back(simHitsTag_TIB_Lowtof_);
  trackerContainers_.push_back(simHitsTag_TIB_Hightof_);
  trackerContainers_.push_back(simHitsTag_TID_Lowtof_);
  trackerContainers_.push_back(simHitsTag_TID_Hightof_);
  trackerContainers_.push_back(simHitsTag_TOB_Lowtof_);
  trackerContainers_.push_back(simHitsTag_TOB_Hightof_);
  */

  bookHistos();
  
}


DemoAnalyzer_old::~DemoAnalyzer_old()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//

// ------------ method called for each event  ------------
void
DemoAnalyzer_old::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{
#ifdef rrDEBUG
  std::cout << "Famos analysis" << std::endl;
#endif
  // get event and run number
#ifdef rrDEBUG
  int t_Run   = iEvent.id().run();
  int t_Event = iEvent.id().event();
  std::cout
    << " #################################### Run " << t_Run 
    << " Event "                                    << t_Event << " #################################### " 
    << std::endl;
#endif

   using namespace edm;
   
   //generator level particles
   Handle<reco::GenParticleCollection> genParticles;
   iEvent.getByLabel("genParticles", genParticles);

   for(size_t i = 0; i < genParticles->size(); ++ i) {

     const reco::GenParticle & p = (*genParticles)[i];
     h_Genpart_Mother_Pt_->Fill(p.pt());
     size_t n = p.numberOfDaughters();
     for(size_t j = 0; j < n; ++ j) {
       const reco::Candidate * d = p.daughter( j );
       h_Genpart_Daughter_Pt_->Fill(d->pt());
     }
   }
     
   
   edm::ESHandle < TrackerGeometry > TG;
   iSetup.get<TrackerDigiGeometryRecord>().get(TG);
   const TrackerGeometry *theTrackerGeometry = TG.product ();

   // Retrieve tracker topology from geometry
   ESHandle<TrackerTopology> tTopoHandle;
   iSetup.get<IdealGeometryRecord>().get(tTopoHandle);
   const TrackerTopology* const tTopo = tTopoHandle.product();

   std::vector<Handle<PSimHitContainer> > theSimHitContainers;
   iEvent.getManyByType(theSimHitContainers);
   //std::cout << " The Number of sim Hits is  " << theSimHitContainers.size() <<std::endl;

   

   //Retrieve the Monte Carlo truth (SimTracks)
   Handle<edm::SimTrackContainer> simTracksHandle;  
   iEvent.getByLabel("famosSimHits",simTracksHandle); 
   const SimTrackContainer simTracks = *(simTracksHandle.product());
   
   
   //Handle<std::vector<PSimHit> > simHitCollection;
   //iEvent.getByLabel(simHitsTag_,  simHitCollection);
   //const std::vector<PSimHit>& simHits = *simHitCollection.product();
   
   
   //if(simHitCollection.isValid()) {
     std::cout<<" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! "<<std::endl;
     //h_Hit_track_map_size_ ->Fill(simHits.size(), simTracks.size());
     for ( SimTrackContainer::const_iterator  simTrack = simTracks.begin(); simTrack != simTracks.end(); ++simTrack) {
       //std::cout <<" genpartIndex = " << (*simTrack).genpartIndex()
       //	       <<" type = " << (*simTrack).type()
       //	       <<" simTrackId = " << (*simTrack).trackId()
       //	       <<" simTrackpT = " << (*simTrack).momentum().pt()<<std::endl;
       h_Track_P_->Fill((*simTrack).momentum().P());
       h_Track_Pt_->Fill((*simTrack).momentum().Pt());
       h_Track_Phi_->Fill((*simTrack).momentum().Phi());
       h_Track_Eta_->Fill((*simTrack).momentum().Eta());
       h_Track_ID_Track_Pt_->Fill((*simTrack).momentum().pt(), fabs((*simTrack).type()));
       
       for (unsigned i=0; i<trackerContainers_.size(); ++i) {
	 Handle<std::vector<PSimHit> > simHitCollection;
	 iEvent.getByLabel(trackerContainers_[i], simHitCollection);
	 const std::vector<PSimHit>& simHits = *simHitCollection.product();
	 if(simHitCollection.isValid()) {
	   unsigned int sum = 0, sum2=0;
	   for( std::vector<PSimHit>::const_iterator Hits=simHits.begin(); Hits!=simHits.end(); ++Hits) {
	     h_Hit_Track_Map_ID_->Fill((*Hits).trackId(), (*simTrack).trackId());
	     
	     if((*Hits).trackId() == (*simTrack).trackId()) {
	       h_Hit_Pixels_Pt_Entry_->Fill((*Hits).momentumAtEntry().mag());
	       h_Hit_Strips_Pt_Entry_->Fill((*Hits).momentumAtEntry().mag());
	       
	       //h_Hit_loss_track_pt_ ->Fill((*Hits).energyLoss(), (*simTrack).momentum().pt());
	       sum++;

	       std::set<unsigned int> detIds;
	       unsigned int detId = (*Hits).detUnitId();
	       unsigned int isub  = DetId(detId).subdetId();
	       if (isub == static_cast<int>(PixelSubdetector::PixelBarrel) || isub == static_cast<int>(PixelSubdetector::PixelEndcap) ) 
		 sum2++;
	       
	       float dx = TMath::Power(
				       TMath::Power( (*Hits).entryPoint().x() - (*Hits).exitPoint().x(), 2) + 
				       TMath::Power( (*Hits).entryPoint().y() - (*Hits).exitPoint().y(), 2) + 
				       TMath::Power( (*Hits).entryPoint().z()- (*Hits).exitPoint().z(), 2), 
				       1/2.);
	       
	       h_Hit_Loss_Track_Pt_ ->Fill((*Hits).pabs(), (*Hits).energyLoss()/dx);
	       h_Hit_Loss_Track_Pt_Protons_->SetFillColor(kRed);
	       if (abs((*Hits).particleType()==2212)) h_Hit_Loss_Track_Pt_Protons_ ->Fill((*Hits).pabs(), (*Hits).energyLoss()/dx);
	       else if (abs((*Hits).particleType()==211)) h_Hit_Loss_Track_Pt_Pions_ ->Fill((*Hits).pabs(), (*Hits).energyLoss()/dx);
	       else if (abs((*Hits).particleType()==321)) h_Hit_Loss_Track_Pt_Kaons_ ->Fill((*Hits).pabs(), (*Hits).energyLoss()/dx);
	 
	       const DetId& theDetId = (*Hits).detUnitId();//geographicalId();
	       const GeomDet* theGeomDet = theTrackerGeometry->idToDet(theDetId);
	       // const GlobalPoint& globalPoint = theGeomDet->toGlobal (localPoint); 
	       //std::cout<< globalPoint.x() <<std::endl;

	       if (isub == static_cast<int>(PixelSubdetector::PixelBarrel)) {
		 if ((*Hits).particleType()<0) std::cout<<(*Hits).particleType()<<std::endl;

		 h_Hit_PXBPXF_PerLayer_Multiplicity_->Fill(tTopo->pxbLayer(detId));
		 histos_PXB_dedx_[tTopo->pxbLayer(detId)-1]->Fill((*Hits).energyLoss()/dx);
		 histos_PDG_PXB_dedx_[tTopo->pxbLayer(detId)-1]->Fill((*Hits).particleType(), (*Hits).energyLoss()/dx);
		 histos_PDG_PXB_dx_[tTopo->pxbLayer(detId)-1]->Fill(abs((*Hits).particleType()), dx);
		 histos_pT_PXB_dedx_[tTopo->pxbLayer(detId)-1]->Fill(abs((*Hits).pabs()), (*Hits).energyLoss()/dx);
		 h_Hit_PixelDets_Map_->Fill(theGeomDet->toGlobal((*Hits).localPosition()).z(),
					    theGeomDet->toGlobal((*Hits).localPosition()).y());
	       }
	       else if (isub == static_cast<int>(PixelSubdetector::PixelEndcap)) {
		 h_Hit_PXBPXF_PerLayer_Multiplicity_->Fill(3 + tTopo->pxfDisk(detId));
		 histos_PXF_dedx_[tTopo->pxfDisk(detId)-1]->Fill((*Hits).energyLoss()/dx);
		 std::cout<<(*Hits).energyLoss()/dx<<std::endl;
		 histos_PDG_PXF_dedx_[tTopo->pxfDisk(detId)-1]->Fill(abs((*Hits).particleType()), (*Hits).energyLoss()/dx);
		 histos_PDG_PXF_dx_[tTopo->pxfDisk(detId)-1]->Fill(abs((*Hits).particleType()), dx);
		 h_Hit_PixelDets_Map_->Fill(theGeomDet->toGlobal((*Hits).localPosition()).z(),
					    theGeomDet->toGlobal((*Hits).localPosition()).y());
	       }
	       //if(detIds.insert(detId).second) {
	       // The insert succeeded, so this detector element has not yet been processed.
	       // unsigned int isub = DetId(detId).subdetId();
	       else if (isub == StripSubdetector::TIB) {
		 histos_TIB_dedx_[tTopo->tibLayer(detId)-1]->Fill((*Hits).energyLoss()/dx);
		 histos_PDG_TIB_dedx_[tTopo->tibLayer(detId)-1]->Fill(abs((*Hits).particleType()), (*Hits).energyLoss()/dx);
		 histos_PDG_TIB_dx_[tTopo->tibLayer(detId)-1]->Fill(abs((*Hits).particleType()), dx);
		 h_Hit_StripDets_Map_->Fill(theGeomDet->toGlobal((*Hits).localPosition()).z(),
					    theGeomDet->toGlobal((*Hits).localPosition()).y());
		 
	       }
	       else if (isub == StripSubdetector::TOB) {
		 histos_TOB_dedx_[tTopo->tobLayer(detId)-1]->Fill((*Hits).energyLoss()/dx); 
		 histos_PDG_TOB_dedx_[tTopo->tobLayer(detId)-1]->Fill(abs((*Hits).particleType()), (*Hits).energyLoss()/dx);
		 histos_PDG_TOB_dx_[tTopo->tobLayer(detId)-1]->Fill(abs((*Hits).particleType()), dx);
		 h_Hit_StripDets_Map_->Fill(theGeomDet->toGlobal((*Hits).localPosition()).z(),
					    theGeomDet->toGlobal((*Hits).localPosition()).y());

	       }
	       else if (isub == StripSubdetector::TID) {
		 histos_TID_dedx_[tTopo->tidRing(detId)-1]->Fill((*Hits).energyLoss()/dx);
		 histos_PDG_TID_dedx_[tTopo->tidRing(detId)-1]->Fill(abs((*Hits).particleType()), (*Hits).energyLoss()/dx);
		 histos_PDG_TID_dx_[tTopo->tidRing(detId)-1]->Fill(abs((*Hits).particleType()), dx);
		 h_Hit_StripDets_Map_->Fill(theGeomDet->toGlobal((*Hits).localPosition()).z(),
					    theGeomDet->toGlobal((*Hits).localPosition()).y());
		 
	       }
	       else if (isub == StripSubdetector::TEC) {
		 histos_TEC_dedx_[tTopo->tecRing(detId)-1]->Fill((*Hits).energyLoss()/dx);
		 histos_PDG_TEC_dedx_[tTopo->tecRing(detId)-1]->Fill(abs((*Hits).particleType()), (*Hits).energyLoss()/dx);
		 histos_PDG_TEC_dx_[tTopo->tecRing(detId)-1]->Fill(abs((*Hits).particleType()), dx);
		 h_Hit_StripDets_Map_->Fill(theGeomDet->toGlobal((*Hits).localPosition()).z(),
					    theGeomDet->toGlobal((*Hits).localPosition()).y());

	 }
	     }
	   }
	 
	   h_Hit_PixelDets_Multiplicity_->Fill(sum) ;
	   h_Hit_StripDets_Multiplicity_->Fill(sum2);
	 }	 
       }
     }
       //     for (auto const& pixel_rechit_per_detid : *simHitCollection) {
       //DetId hitId = pixel_rechit_per_detid.detId();
       // continue;
       //}
       //       DetId hitId = pixel_rechit_per_detid.detId();
       //  for (auto const& a_pixel_rechit : pixel_rechit_per_detid) {
       //if (a_pixel_rechit.isValid()) {
       
       // const PSimHitCollection * simhits = simhit.product();
       //   for(size_t i = 0; i <  simhits.product()->size(); ++ i) continue;
       //Handle<PSimHitContainer> CSCsimhits;
       //   for(std::vector<PSimHit>::const_iterator simHit = simTrack.pSimHit_begin();
       // simHit!= simTrack.pSimHit_end();
       // simHit++)continue;
       
       // LogInfo("Demo") << "number of tracks "<<tracks->size();
   //} // if(simHitCollection.isValid())   ('famosenabled')

#ifdef THIS_IS_AN_EVENT_EXAMPLE
   Handle<ExampleData> pIn;
   iEvent.getByLabel("example",pIn);
#endif
   
#ifdef THIS_IS_AN_EVENTSETUP_EXAMPLE
   ESHandle<SetupData> pSetup;
   iSetup.get<SetupRecord>().get(pSetup);
#endif
}


// ------------ method called once each job just before starting event loop  ------------
void 
DemoAnalyzer_old::beginJob()
{
}

// ------------ method called once each job just after ending the event loop  ------------
void 
DemoAnalyzer_old::endJob() 
{
}

// ------------ method called when starting to processes a run  ------------
/*
void 
DemoAnalyzer_old::beginRun(edm::Run const&, edm::EventSetup const&)
{
}
*/

// ------------ method called when ending the processing of a run  ------------
/*
void 
DemoAnalyzer_old::endRun(edm::Run const&, edm::EventSetup const&)
{
}
*/

// ------------ method called when starting to processes a luminosity block  ------------
/*
void 
DemoAnalyzer_old::beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}
*/

// ------------ method called when ending the processing of a luminosity block  ------------
/*
void 
DemoAnalyzer_old::endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}
*/

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void
DemoAnalyzer_old::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  //The following says we do not know what parameters are allowed so do no validation
  // Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}


void 
DemoAnalyzer_old::bookHistos()
{
    int    nbins   = 200;
    float  range   = 1e-3;
    int    nbinsX_PDG   = 2*2212;
    float  rangeX_PDG   = 2213;
    int    nbins_pT   = 50;
    int    nbinsY   = 200;
    float  rangeY_dedx   = 9e-3; //1e-3 (eloss)
    float  rangeY_dx   = 1e-1;
    float  rangeX_pT   = 60;

    //Detectors
    //Pixel Barrel - 3 different detector
    bookEnergyLosses1D(histos_PXB_dedx_,  nbins, range, "PXB", nHistos_PXB_);
    bookEnergyLosses2D( histos_PDG_PXB_dedx_, nbinsX_PDG, rangeX_PDG, nbinsY, rangeY_dedx,"dEdx", "PDG_PXB", nHistos_PXB_ );
    bookEnergyLosses2D( histos_PDG_PXB_dx_, nbinsX_PDG, rangeX_PDG, nbinsY, rangeY_dx, "dx", "PDG_PXB", nHistos_PXB_ );
    bookEnergyLosses2D( histos_pT_PXB_dedx_, nbins_pT, rangeX_pT, nbinsY, rangeY_dedx, "dEdx", "pT_PXB", nHistos_PXB_ );
    //Pixel Endcap - 2 different detector
    bookEnergyLosses1D(histos_PXF_dedx_,  nbins, range, "PXF", nHistos_PXF_);
    bookEnergyLosses2D( histos_PDG_PXF_dedx_, nbinsX_PDG, rangeX_PDG, nbinsY, rangeY_dedx,"dEdx", "PDG_PXF", nHistos_PXF_ );
    bookEnergyLosses2D( histos_PDG_PXF_dx_, nbinsX_PDG, rangeX_PDG, nbinsY, rangeY_dx,"dx", "PDG_PXF", nHistos_PXF_ );
    //TIB - 4 different detectors
    bookEnergyLosses1D( histos_TIB_dedx_, nbins, range, "TIB", nHistos_TIB_ );
    bookEnergyLosses2D( histos_PDG_TIB_dedx_, nbinsX_PDG, rangeX_PDG, nbinsY, rangeY_dedx,"dEdx", "PDG_TIB", nHistos_TIB_ );
    bookEnergyLosses2D( histos_PDG_TIB_dx_, nbinsX_PDG, rangeX_PDG, nbinsY, rangeY_dx,"dx", "PDG_TIB", nHistos_TIB_ );
    // TOB - 6 different detectors
    bookEnergyLosses1D( histos_TOB_dedx_, nbins, range, "TOB", nHistos_TOB_ );
    bookEnergyLosses2D( histos_PDG_TOB_dedx_, nbinsX_PDG, rangeX_PDG, nbinsY, rangeY_dedx, "dEdx", "PDG_TOB", nHistos_TOB_ );
    bookEnergyLosses2D( histos_PDG_TOB_dx_, nbinsX_PDG, rangeX_PDG, nbinsY, rangeY_dx, "dx", "PDG_TOB", nHistos_TOB_ );
    // TID - 3 different detectors
    bookEnergyLosses1D( histos_TID_dedx_, nbins, range, "TID", nHistos_TID_ );
    bookEnergyLosses2D( histos_PDG_TID_dedx_, nbinsX_PDG, rangeX_PDG, nbinsY, rangeY_dedx,"dEdx", "PDG_TID", nHistos_TID_ );
    bookEnergyLosses2D( histos_PDG_TID_dx_, nbinsX_PDG, rangeX_PDG, nbinsY, rangeY_dx,"dx", "PDG_TID", nHistos_TID_ );
    // TEC - 9 different detectors
    bookEnergyLosses1D( histos_TEC_dedx_, nbins, range, "TEC", nHistos_TEC_ );
    bookEnergyLosses2D( histos_PDG_TEC_dedx_, nbinsX_PDG, rangeX_PDG, nbinsY, rangeY_dedx,"dEdx", "PDG_TEC", nHistos_TEC_ );
    bookEnergyLosses2D( histos_PDG_TEC_dx_, nbinsX_PDG, rangeX_PDG, nbinsY, rangeY_dx,"dx", "PDG_TEC", nHistos_TEC_ );

}

void 
DemoAnalyzer_old::bookEnergyLosses1D( std::vector<TH1F*>& histos_det_dedx, int nBins, float range, const TString &det, unsigned int nHistos )
{
  for(unsigned int iHist = 0; iHist < nHistos; iHist++) 
    histos_det_dedx.push_back( fs_->make<TH1F>(Form( "hist_%s_%u_dedx" , det.Data() , iHist+1 ) ,
					       Form( "Sim_Hit_dE/dx_%s_%u;dE/dx;Entries/bin" , det.Data() , iHist+1 ) ,
					       nBins , 0.0 ,  range ));
}

void 
DemoAnalyzer_old::bookEnergyLosses2D( std::vector<TH2F*>& histos_PDG_det_dedx, 
				  int nBinsX, float rangeX, int nBinsY, float rangeY, 
				  const TString &var, const TString &det, unsigned int nHistos )
{
  for(unsigned int iHist = 0; iHist < nHistos; iHist++) 
    histos_PDG_det_dedx.push_back( fs_->make<TH2F>(Form( "hist_%s_%u_%s" , det.Data() , iHist+1, var.Data() ) ,
						   Form( "Sim_Hit_%s_%s_%u;%s;Entries/bin" , var.Data(), det.Data() , iHist+1, var.Data() ) ,
						   nBinsX , 0. , rangeX, nBinsY , 0.0 ,  rangeY));
}
/*
void 
DemoAnalyzer_old::fillHistos( unsigned int rawid ,TH1F*& hist_det_dedx, const TrackerTopology *tTopo) 
{
  int subdetid = ((rawid>>25)&0x7);

  switch (subdetid) {
  case 3: // Pixel Barrel
    unsigned int theLayer = tTopo->tibLayer(rawid)
    hist_dedx = histos_TIB_dedx[theLayer-1];
  }
} 
*/ 
//define this as a plug-in
DEFINE_FWK_MODULE(DemoAnalyzer_old);
